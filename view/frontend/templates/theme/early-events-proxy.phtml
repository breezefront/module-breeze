<script data-defer-js-ignore>
(() => {
    var rules = <?= $block->getRules() ?>,
        spinner,
        selectors = [],
        spinnerConfig = {};

    function updateSpinner(config) {
        spinnerConfig = config || spinnerConfig;

        var rect = spinnerConfig.el?.getBoundingClientRect(),
            clipPath = spinnerConfig.el ? getComputedStyle(spinnerConfig.el).getPropertyValue('clip-path') : '',
            offset = ['none', ''].includes(clipPath) ? 2 : 0;

        if (!rect || !rect.width || !rect.height) {
            return spinner ? spinner.style.display = 'none' : null;
        }

        if (!spinner) {
            spinner = new DOMParser().parseFromString(`
                <div class="loading-mask early-event-spinner" style="display:none;">
                    <div class="loader"></div>
                </div>
            `, 'text/html').body.firstChild;
            document.body.append(spinner);
        }

        Object.entries({
            top: `${rect.top + window.scrollY - offset}px`,
            left: `${rect.left + window.scrollX - offset}px`,
            width: `${rect.width + offset * 2}px`,
            height: `${rect.height + offset * 2}px`,
            display: 'flex',
            'clip-path': clipPath,
        }).forEach(([key, value]) => {
            spinner.style[key] = value;
        });
    }

    rules.forEach(rule => {
        rule.events.forEach(event => {
            var [, eventName, selector] = event.match(/^([\w:-]*)\s*(.*)$/),
                handler = (e) => {
                    var el = e.target.closest?.(selector);

                    if (e.defaultPrevented || !el) {
                        return;
                    }

                    e.preventDefault();
                    e.stopImmediatePropagation();

                    if (spinnerConfig.el !== el) {
                        updateSpinner({
                            el,
                            eventName,
                            component: rule.component,
                        });
                    }
                },
                mouseleaveHandler = (e) => {
                    if (e.target.closest?.(selector) && spinnerConfig.component === rule.component) {
                        updateSpinner({});
                    }
                },
                elements = [];

            selectors.push(selector);

            if (eventName === 'mouseenter') {
                elements = document.querySelectorAll(selector);
                elements.forEach(el => {
                    el.addEventListener('mouseenter', handler);
                    el.addEventListener('mouseleave', mouseleaveHandler);
                });
            } else {
                document.addEventListener(eventName, handler);
            }

            document.addEventListener(`breeze:component:load:${rule.component}`, () => {
                if (eventName === 'mouseenter') {
                    elements.forEach(el => {
                        el.removeEventListener('mouseenter', handler);
                        el.removeEventListener('mouseleave', mouseleaveHandler);
                    });
                } else {
                    document.removeEventListener(eventName, handler);
                }

                setTimeout(() => {
                    if (spinnerConfig.component === rule.component) {
                        try {
                            rule.proxy !== false && $(spinnerConfig.el)[spinnerConfig.eventName]();
                        } catch (e) {}
                        updateSpinner({});
                    }
                }, 200);
            }, { once: true });
        });
    });

    window.addEventListener('resize', () => updateSpinner());
    document.addEventListener('click', () => updateSpinner({}));

    var unrevealObserver = new IntersectionObserver(entries => {
        if (entries.some(entry => !entry.isIntersecting && spinnerConfig.el === entry.target)) {
            updateSpinner({});
        }
    });

    document.addEventListener('DOMContentLoaded', () => {
        try {
            [...document.querySelectorAll(selectors.join(','))].forEach(el => {
                unrevealObserver.observe(el);
            });
        } catch (e) {}
    });
})();
</script>
